
CREATE VIEW [ax_cus].[v_STOCK_HISTORY] 
AS
WITH cte AS(
	SELECT 
		CAST(NULL AS BIGINT)																									AS [TRANSACTION_ID],
		CAST(it.[ITEMID] AS NVARCHAR(255))																								AS ITEM_NO,
		CAST(ID.INVENTLOCATIONID AS	NVARCHAR(255))																				AS LOCATION_NO,
		CAST(it.DATEPHYSICAL AS DATE) 		 																					AS [DATE],
		CAST(SUM(it.QTY) AS DECIMAL(18,4))	 																					AS STOCK_MOVE
	FROM ax.INVENTTRANS it
		INNER JOIN ax.INVENTDIM id					ON id.inventdimid = it.inventdimid AND id.DATAAREAID = it.DATAAREAID AND id.[PARTITION] = it.[PARTITION]
		INNER JOIN core.location_mapping_setup lms	ON lms.locationNo=id.INVENTLOCATIONID
	WHERE 
		it.DATEPHYSICAL <> '1900-01-01 00:00:00.000'	
		AND it.DATEPHYSICAL >= (SELECT DATEADD(YEAR,CAST(settingValue AS INT)*-1,GETDATE()) FROM core.setting WHERE settingKey = 'sale_history_retention_years')
		AND it.qty < 10000000
	GROUP BY 
		it.DATEPHYSICAL,
		ID.INVENTLOCATIONID,
		it.[ITEMID]
	--HAVING SUM(it.QTY) <> 0.0
	),

STOCK_LEVEL_PER_LOCATION AS(
	SELECT 
	s.ITEMID AS ITEM_NO,
	id.INVENTLOCATIONID AS LOCATION_NO,
	SUM(s.PHYSICALINVENT) AS STOCK_LEVEL
	FROM 
	ax.INVENTSUM s
	INNER JOIN ax.INVENTDIM id ON s.DATAAREAID = id.DATAAREAID AND s.INVENTDIMID = id.INVENTDIMID AND s.[PARTITION] = id.[PARTITION]
	GROUP BY s.ITEMID, id.INVENTLOCATIONID
)

SELECT cte.TRANSACTION_ID,
       cte.ITEM_NO,
       cte.LOCATION_NO,
       cte.[DATE],
       cte.STOCK_MOVE,
	   CAST(slpl.STOCK_LEVEL + cte.STOCK_MOVE - SUM(cte.STOCK_MOVE) OVER (PARTITION BY cte.ITEM_NO ORDER BY cte.[DATE] DESC) AS DECIMAL(18,4))AS STOCK_LEVEL
FROM 
cte
INNER JOIN STOCK_LEVEL_PER_LOCATION slpl ON slpl.ITEM_NO = cte.ITEM_NO AND slpl.LOCATION_NO = cte.LOCATION_NO

